<?php

namespace App;

class TelegramService {
    private $botToken;
    private $chatId;
    
    public function __construct() {
        $this->botToken = $_ENV['TELEGRAM_BOT_TOKEN'] ?? getenv('TELEGRAM_BOT_TOKEN');
        $this->chatId = $_ENV['TELEGRAM_CHAT_ID'] ?? getenv('TELEGRAM_CHAT_ID');
    }
    
    public function isConfigured(): bool {
        return !empty($this->botToken) && !empty($this->chatId);
    }
    
    public function sendNewOrderNotification($order): bool {
        if (!$this->isConfigured()) {
            error_log('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
            return false;
        }
        
        try {
            $orderTypeText = $order['order_type'] === 'astana' ? '–ê—Å—Ç–∞–Ω–∞' : '–†–µ–≥–∏–æ–Ω—ã';
            
            $message = "üöö *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{$order['id']}*\n\n" .
                "*–¢–∏–ø:* {$orderTypeText}\n" .
                "*–ö–ª–∏–µ–Ω—Ç:* {$order['contact_person']}\n" .
                "*–¢–µ–ª–µ—Ñ–æ–Ω:* {$order['phone']}\n" .
                "*–ì—Ä—É–∑:* {$order['cargo_type']} ({$order['weight']} –∫–≥)\n";
            
            if (!empty($order['pickup_city'])) {
                $message .= "*–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {$order['pickup_city']}\n";
            }
            
            $message .= "*–ó–∞–±–æ—Ä:* {$order['pickup_address']}\n";
            
            if (!empty($order['destination_city'])) {
                $message .= "*–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:* {$order['destination_city']}\n";
            }
            
            $message .= "*–î–æ—Å—Ç–∞–≤–∫–∞:* {$order['delivery_address']}\n" .
                "*–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:* {$order['ready_time']}\n" .
                "*–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {$order['recipient_contact']} ({$order['recipient_phone']})\n";
            
            if (!empty($order['comment'])) {
                $message .= "*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {$order['comment']}\n";
            }
            
            if (!empty($order['delivery_method'])) {
                $message .= "*–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:* {$order['delivery_method']}\n";
            }
            
            if (!empty($order['desired_arrival_date'])) {
                $message .= "*–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:* {$order['desired_arrival_date']}\n";
            }
            
            $message .= "\n*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* " . date('d.m.Y H:i', strtotime($order['created_at']));
            
            return $this->sendMessage($message);
            
        } catch (Exception $e) {
            error_log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ' . $e->getMessage());
            return false;
        }
    }
    
    public function sendStatusUpdateNotification($order, $oldStatus): bool {
        if (!$this->isConfigured()) {
            return false;
        }
        
        try {
            $statusText = $order['status'] === 'completed' ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' : 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
            $oldStatusText = $oldStatus === 'completed' ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' : 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
            
            $message = "üìã *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{$order['id']}*\n\n" .
                "*–ö–ª–∏–µ–Ω—Ç:* {$order['contact_person']}\n" .
                "*–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:* {$oldStatusText} ‚Üí {$statusText}\n" .
                "*–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:* " . date('d.m.Y H:i');
            
            return $this->sendMessage($message);
            
        } catch (Exception $e) {
            error_log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ: ' . $e->getMessage());
            return false;
        }
    }
    
    private function sendMessage($message): bool {
        $url = "https://api.telegram.org/bot{$this->botToken}/sendMessage";
        
        $data = [
            'chat_id' => $this->chatId,
            'text' => $message,
            'parse_mode' => 'Markdown',
            'disable_web_page_preview' => true
        ];
        
        $options = [
            'http' => [
                'header' => "Content-type: application/x-www-form-urlencoded\r\n",
                'method' => 'POST',
                'content' => http_build_query($data)
            ]
        ];
        
        $context = stream_context_create($options);
        $result = file_get_contents($url, false, $context);
        
        if ($result === false) {
            error_log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è');
            return false;
        }
        
        $response = json_decode($result, true);
        
        if (isset($response['ok']) && $response['ok']) {
            error_log('Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            return true;
        } else {
            error_log('–û—à–∏–±–∫–∞ Telegram API: ' . ($response['description'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            return false;
        }
    }
}