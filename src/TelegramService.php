<?php

namespace App;

use Exception;

class TelegramService {
    private $botToken;
    private $chatId;
    
    public function __construct() {
        $this->botToken = $_ENV['TELEGRAM_BOT_TOKEN'] ?? getenv('TELEGRAM_BOT_TOKEN');
        $this->chatId = $_ENV['TELEGRAM_CHAT_ID'] ?? getenv('TELEGRAM_CHAT_ID');
    }
    
    public function isConfigured(): bool {
        return !empty($this->botToken) && !empty($this->chatId);
    }
    
    public function sendNewOrderNotification($order): bool {
        if (!$this->isConfigured()) {
            error_log('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
            return false;
        }
        
        try {
            $orderTypeText = $order['order_type'] === 'astana' ? '–ê—Å—Ç–∞–Ω–∞' : '–†–µ–≥–∏–æ–Ω—ã';
            
            $message = "üöö *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{$order['id']}*\n\n" .
                "*–¢–∏–ø:* {$orderTypeText}\n" .
                "*–ö–ª–∏–µ–Ω—Ç:* {$order['contact_name']}\n" .
                "*–¢–µ–ª–µ—Ñ–æ–Ω:* {$order['contact_phone']}\n" .
                "*–ì—Ä—É–∑:* {$order['cargo_type']} ({$order['weight']} –∫–≥)\n";
            
            if (!empty($order['pickup_city'])) {
                $message .= "*–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {$order['pickup_city']}\n";
            }
            
            $message .= "*–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞:* {$order['pickup_address']}\n";
            
            if (!empty($order['destination_city'])) {
                $message .= "*–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:* {$order['destination_city']}\n";
            }
            
            if (!empty($order['delivery_address'])) {
                $message .= "*–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* {$order['delivery_address']}\n";
            }
            
            $message .= "*–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:* {$order['ready_time']}\n";
            $message .= "*–°–æ–∑–¥–∞–Ω:* " . date('d.m.Y H:i', strtotime($order['created_at']));
            
            return $this->sendMessage($message);
            
        } catch (Exception $e) {
            error_log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: ' . $e->getMessage());
            return false;
        }
    }
    
    public function sendStatusUpdateNotification($order, $oldStatus, $newStatus): bool {
        if (!$this->isConfigured()) {
            return false;
        }
        
        try {
            $statusMap = [
                'new' => 'üÜï –ù–æ–≤—ã–π',
                'processing' => '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'completed' => '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω'
            ];
            
            $oldStatusText = $statusMap[$oldStatus] ?? $oldStatus;
            $newStatusText = $statusMap[$newStatus] ?? $newStatus;
            
            $message = "üìã *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{$order['id']}*\n\n" .
                "*–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:* {$oldStatusText} ‚Üí {$newStatusText}\n" .
                "*–ö–ª–∏–µ–Ω—Ç:* {$order['contact_name']}\n" .
                "*–¢–µ–ª–µ—Ñ–æ–Ω:* {$order['contact_phone']}\n" .
                "*–û–±–Ω–æ–≤–ª–µ–Ω–æ:* " . date('d.m.Y H:i');
            
            return $this->sendMessage($message);
            
        } catch (Exception $e) {
            error_log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ: ' . $e->getMessage());
            return false;
        }
    }
    
    private function sendMessage($message): bool {
        $url = "https://api.telegram.org/bot{$this->botToken}/sendMessage";
        
        $data = [
            'chat_id' => $this->chatId,
            'text' => $message,
            'parse_mode' => 'Markdown'
        ];
        
        $context = stream_context_create([
            'http' => [
                'method' => 'POST',
                'header' => 'Content-Type: application/x-www-form-urlencoded',
                'content' => http_build_query($data)
            ]
        ]);
        
        $result = file_get_contents($url, false, $context);
        
        if ($result === false) {
            error_log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram');
            return false;
        }
        
        $response = json_decode($result, true);
        
        if (!$response['ok']) {
            error_log('Telegram API –æ—à–∏–±–∫–∞: ' . $response['description']);
            return false;
        }
        
        return true;
    }
}